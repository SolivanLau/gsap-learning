---
import type { HTMLAttributes } from "astro/types";
// COMPONENTS
import Link from "@components/Link.astro";
import Menu from "@assets/icons/Menu.astro";

// ICONS

type Props = HTMLAttributes<"nav">;
const { class: className, ...rest } = Astro.props;
---

<nav class:list={["nav", className]} {...rest}>
    <div class="wrapper nav__wrapper">
        <div class="nav__list">
            <ul class="nav__links">
                <li>
                    <Link href="/getting-started" class="nav__link fs-fluid-h5"
                        >Getting Started</Link
                    >
                </li>
                <li>
                    <Link href="/basics" class="nav__link fs-fluid-h5">Basics</Link>
                </li>
            </ul>
            <hr class="divider" />
        </div>
        <button class="hamburger">
            <Menu class={"hamburger__icon"} size={48} />
        </button>
    </div>
</nav>

<style lang="scss">
    @use "../styles/abstracts" as *;
    .nav {
        position: relative;
        isolation: isolate;
        z-index: 100;
    }

    .nav__wrapper {
        border: 2px solid color-mix(in oklab, var(--clr-indigo-700) 20%, transparent);
        box-shadow: var(--clr-box-shadow);
        border-radius: var(--bdr-radius);
    }

    .nav__list {
        position: absolute;
        width: 70%;
        top: 0;
        right: 0;
        height: 100vh;
        height: 100dvh;
        padding: var(--spc-2xl) var(--spc-md) var(--spc-md);
        display: flex;
        flex-direction: column;
        // glassmorphism
        backdrop-filter: blur(10px);
        background-color: color-mix(in oklab, var(--clr-stone-950) 70%, transparent);
        border-radius: 12px;
        border: 2px solid color-mix(in oklab, var(--clr-indigo-600) 20%, transparent);
    }

    .nav__links {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: var(--spc-md);
        max-height: 70%;
    }

    .divider {
        border: 1px solid color-mix(in oklab, var(--clr-indigo-600) 20%, transparent);
        width: 100%;
    }
</style>

<script>
    import { gsap } from "gsap";
    import { CustomEase } from "gsap/CustomEase";
    gsap.registerPlugin(CustomEase);

    const hamburger = document.querySelector(".hamburger") as HTMLButtonElement;
    const hamburgerIcon = document.querySelector(".hamburger__icon") as HTMLElement;
    const hamburgerLine = hamburgerIcon.querySelector(".line-top-bottom") as HTMLElement;
    let isOpen: boolean = false;

    hamburger.addEventListener("click", () => {
        isOpen = !isOpen;

        const tl = gsap.timeline();

        tl.to(hamburgerIcon, {
            rotate: isOpen ? 45 : 0,
            ease: CustomEase.create("ease", "0.6, 0, 0.2, 0"),
        }).to(
            hamburgerLine,
            {
                strokeDasharray: isOpen ? "20 200" : "12 63",
                strokeDashoffset: isOpen ? -33 : 0,
                ease: CustomEase.create("ease", "0.6, 0, 0.2, 0"),
            },
            "<",
        );
    });
</script>
