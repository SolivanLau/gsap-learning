---
import type { HTMLAttributes } from "astro/types";
// COMPONENTS
import Link from "@components/Link.astro";
import Menu from "@assets/icons/Menu.astro";

// ICONS

type Props = HTMLAttributes<"nav">;
const { class: className, ...rest } = Astro.props;
---

<nav class:list={["nav", className]} {...rest}>
    <div class="wrapper nav__wrapper">
        <div class="logo"></div>
        <div class="nav__list">
            <ul class="nav__links">
                <li>
                    <Link href="/getting-started" class="nav__link fs-fluid-h5">Projects</Link>
                </li>
                <li>
                    <Link href="/basics" class="nav__link fs-fluid-h5">Learn</Link>
                </li>
                <li>
                    <Link href="/blog" class="nav__link fs-fluid-h5">Blog</Link>
                </li>
            </ul>
            <hr class="divider" />
        </div>
        <button class="hamburger">
            <Menu class={"hamburger__icon"} size={48} />
        </button>
    </div>
</nav>

<style lang="scss">
    @use "../styles/abstracts" as *;
    .nav {
        position: fixed;
        top: rem(20);
        left: 50%;
        z-index: 150;
        translate: -50% 0;
        width: calc(100% - rem(32));
        max-width: 1280px;
        border: 2px solid color-mix(in oklab, var(--clr-indigo-700) 20%, transparent);
        background-color: var(--clr-bg);
        box-shadow: var(--clr-box-shadow);
        border-radius: var(--bdr-radius);
        padding: var(--spc-sm) var(--spc-md);
        transition:
            max-width 0.3s,
            width 0.3s,
            top 0.3s,
            margin-inline 0.3s;

        @include breakpoint(tablet) {
        }
    }

    .nav--scrolling {
        margin: 0;
        max-width: 100%;
        width: 100%;
        top: 0;
        border-radius: 0;
    }
    .nav__wrapper {
        display: flex;
        justify-content: space-between;
        overflow: hidden;
    }

    .nav__list {
        // mobile menu
        width: 70%;
        top: 0;
        right: 0;
        height: 100vh;
        height: 100dvh;
        // layout
        padding: var(--spc-2xl) var(--spc-md) var(--spc-md);
        display: flex;
        flex-direction: column;
        // glassmorphism
        backdrop-filter: blur(10px);
        background-color: color-mix(in oklab, var(--clr-stone-950) 70%, transparent);
        border-radius: var(--bdr-radius);
        border: 2px solid color-mix(in oklab, var(--clr-indigo-600) 20%, transparent);
        z-index: 200;
        @include breakpoint(tablet) {
            width: auto;
            height: auto;
            border: 2px solid transparent;
            padding: 0;
        }
    }

    .nav__links {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: var(--spc-md);
        max-height: 70%;
        @include breakpoint(tablet) {
            flex-direction: row;
        }
    }
    .nav__link {
        color: var(--clr-title);
        @include breakpoint(tablet) {
            color: var(--clr-body);
            font-size: var(--fs-desktop-h6);
        }
    }

    .divider {
        border: 1px solid color-mix(in oklab, var(--clr-indigo-600) 20%, transparent);
        width: 100%;
        @include breakpoint(tablet) {
            display: none;
        }
    }
</style>

<script>
    import { gsap } from "gsap";
    import { CustomEase } from "gsap/CustomEase";
    import { ScrollTrigger } from "gsap/ScrollTrigger";
    gsap.registerPlugin(CustomEase);
    gsap.registerPlugin(ScrollTrigger);

    // NAVIGATION
    const nav = document.querySelector(".nav") as HTMLElement;
    // MOBILE MENU
    const mobileMenu = document.querySelector(".nav__list") as HTMLElement;
    const mobileMenuLinks = mobileMenu.querySelectorAll(".nav__link") as NodeListOf<HTMLElement>;
    // HAMBURGER MENU
    const hamburger = document.querySelector(".hamburger") as HTMLButtonElement;
    const hamburgerIcon = document.querySelector(".hamburger__icon") as HTMLElement;
    const hamburgerLine = hamburgerIcon.querySelector(".line-top-bottom") as HTMLElement;
    let isOpen: boolean = false;

    const mm = gsap.matchMedia();

    mm.add({ mobile: "(max-width: 768px)", desktop: "(min-width: 768px)" }, (context) => {
        // set layout for mobile only
        if (context.conditions && context.conditions.mobile) {
            gsap.set(mobileMenu, {
                position: "fixed",
                xPercent: 106,
            });
            // hidden links for accessibility readers
            gsap.set(mobileMenuLinks, {
                autoAlpha: 0,
            });
            gsap.set(hamburger, {
                position: "relative",
                zIndex: 300,
            });
        }

        if (context.conditions && context.conditions.desktop) {
            gsap.set(hamburger, {
                display: "none",
            });
        }
    });
    const hamburgerTl = gsap.timeline();
    const menuTl = gsap.timeline({});

    // Hamburger animation
    const animateHamburger = () => {
        hamburgerTl
            .to(hamburgerIcon, {
                rotate: isOpen ? 45 : 0,
                ease: CustomEase.create("ease", "0.6, 0, 0.2, 0"),
            })
            .to(
                hamburgerLine,
                {
                    strokeDasharray: isOpen ? "20 200" : "12 63",
                    strokeDashoffset: isOpen ? -33 : 0,
                    ease: CustomEase.create("ease", "0.6, 0, 0.2, 0"),
                },
                "<",
            );
    };
    // Menu animation
    const animateMenu = () => {
        if (mm.contexts[0].conditions && mm.contexts[0].conditions.mobile) {
            menuTl
                .to(mobileMenu, {
                    xPercent: isOpen ? 0 : 106,
                    ease: "power3.out",
                    duration: 0.6,
                })
                .to(
                    mobileMenuLinks,
                    {
                        autoAlpha: isOpen ? 1 : 0,
                        stagger: isOpen ? 0.2 : 0,
                    },
                    isOpen ? ">-0.5" : "<",
                );
        }
    };

    // Hamburger click
    hamburger.addEventListener("click", () => {
        isOpen = !isOpen;

        // body animation
        if (isOpen) {
            animateHamburger();
            animateMenu();
            document.body.classList.add("overlay--active");
        } else {
            animateHamburger();
            animateMenu();
            document.body.classList.remove("overlay--active");
        }
    });

    // Overlay click
    document.addEventListener("click", (e: MouseEvent) => {
        if (mm.contexts[0].conditions && mm.contexts[0].conditions.mobile) {
            if (isOpen && e.target === document.body) {
                isOpen = !isOpen;
                animateHamburger();
                animateMenu();
                document.body.classList.remove("overlay--active");
            }
        }
    });

    ScrollTrigger.create({
        start: "top -50",
        onEnter: () => nav.classList.add("nav--scrolling"),
        onLeaveBack: () => nav.classList.remove("nav--scrolling"),
    });
</script>
