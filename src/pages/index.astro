---
// COMPONENTS
import PageLayout from "@layouts/PageLayout.astro";
import Card from "@components/Card.astro";
// ICONS
import Gear from "@icons/Gear.astro";
import Lightning from "@icons/Lightning.astro";
import Text from "@icons/Text.astro";
import Clock from "@assets/icons/Clock.astro";
import MouseScroll from "@assets/icons/MouseScroll.astro";
import Hero from "@components/Hero.astro";
---

<PageLayout>
    <Hero class="section__padding section__padding--bottom" />
    <main class="wrapper section__padding section__padding--sm">
        <div class="flow">
            <p>
                This is a concurrent learning project learning the GSAP learning library with
                vanilla HTML, CSS and JavaScript.
            </p>
            <p>Here are some other notes about the project:</p>
            <ul class="flow">
                <li>
                    This project uses Astro for easier development with componennts, scoped styles,
                    and easy integrations with libraries and frameworks.
                </li>
                <li>We will go through the basics of GSAP with basic typescript.</li>
                <li>this project uses prettier and eslint for formatting and linting.</li>
                <li>Light usage of SASS is in use, mostly for normalize and global styles.</li>
            </ul>
        </div>

        <section class="section--learning section__padding section__padding flow">
            <h2>Start Learning</h2>
            <p>Here are some topics to get you started!</p>
            <div class="grid grid--col-3">
                <!-- GETTING STARTED -->
                <Card link href="/getting-started" class="link--topic" iconBgColor="grey">
                    <Gear data-animation="gear" size={40} slot={"icon"} />
                    <h3 slot="title">Getting Started</h3>
                    <p slot="text">Installation & boilerplate</p>
                </Card>

                <!-- BASICS -->
                <Card link href="/basics" class="link--topic" iconBgColor="yellow">
                    <Lightning data-animation="lightning" slot="icon" size={40} />
                    <h3 slot="title">Basics</h3>
                    <p slot="text">Properties, tweens, & keyframes</p>
                </Card>

                <!-- TIMELINES -->
                <Card link href="/timelines" class="link--topic" iconBgColor="red" link>
                    <Clock data-animation="clock" slot="icon" size={40} />
                    <h3 slot="title">Timelines</h3>
                    <p slot="text">Complex tweens</p>
                </Card>

                <!-- TEXT ANIMATIONS -->
                <Card link href="/animations/text" class="link--topic" iconBgColor="orange">
                    <Text data-animation="text" slot="icon" size={40} />
                    <h3 slot="title">Text Animations</h3>
                    <p slot="text">Split, swipes, and more</p>
                </Card>
                <!-- SCROLL -->
                <Card link href="/animations/scroll" class="link--topic" iconBgColor="green">
                    <MouseScroll data-animation="mouse-scroll" slot="icon" size={40} />
                    <h3 slot="title">Scroll</h3>
                    <p slot="text">Play, scrub & link to scroll</p>
                </Card>
            </div>
        </section>
    </main>
</PageLayout>

<style lang="scss">
    @use "../styles/abstracts" as *;
    .grid {
        display: grid;
        gap: #{rem(20)};
    }
    .grid--col-3 {
        @include breakpoint(600) {
            grid-template-columns: repeat(2, 1fr);
        }
        @include breakpoint(desktop) {
            grid-template-columns: repeat(3, 1fr);
        }
    }
</style>

<script>
    import { gsap } from "gsap";
    import { CustomEase } from "gsap/CustomEase";
    import { ScrollTrigger } from "gsap/ScrollTrigger";
    gsap.registerPlugin(ScrollTrigger);
    gsap.registerPlugin(CustomEase);

    const tlLearningSection = gsap.timeline({
        scrollTrigger: {
            trigger: ".section--learning",
            start: "top 80%",
        },
    });
    tlLearningSection
        .from(".section--learning > h2, .section--learning > p", {
            opacity: 0,
            duration: 0.5,
            stagger: 0.3,
            yPercent: -25,
            ease: "power3.out",
        })
        .from(
            ".link--topic",
            {
                autoAlpha: 0,
                xPercent: -5,
                duration: 0.7,
                stagger: 0.2,
                ease: "power3.out",
            },
            "<0.5", // Start immediately after
        );

    // Custom Hover Animations
    const learningCards = document.querySelectorAll(".link--topic");

    learningCards.forEach((learningCard) => {
        const iconTl = gsap.timeline({
            paused: true,
            smoothChildTiming: true,
        });
        const icon = learningCard.querySelector("[data-animation]") as SVGElement;

        iconTl
            .to(
                icon,
                {
                    scale: 1.4,
                    rotate: 5,
                    ease: "elastic.out(1.5, 0.75)",
                    duration: 0.5,
                    filter: "drop-shadow(0 0 5px rgba(255, 231, 135, .1))",
                },
                "grow",
            )
            .to(
                icon,
                {
                    scale: 1,
                    rotate: 0,
                    ease: CustomEase.create(
                        "custom",
                        "M0,0 C0.14,0 0.242,0.438 0.272,0.561 0.313,0.728 0.354,0.963 0.362,1 0.37,0.985 0.414,0.736 0.455,0.674 0.51,0.589 0.573,0.627 0.586,0.636 0.662,0.686 0.719,0.981 0.726,0.998 0.788,0.914 0.823,0.896 0.859,0.931 0.875,0.947 0.897,0.985 0.911,0.998 0.922,0.994 0.939,0.984 0.954,0.984 0.969,0.984 1,1 1,1 ",
                    ),
                    duration: 0.4,
                    filter: "drop-shadow(0 0 5px rgba(255, 231, 135, 0px))",
                },
                "shrink",
            );

        learningCard.addEventListener("mouseenter", () => {
            iconTl.tweenFromTo(0, "shrink");
        });
        learningCard.addEventListener("mouseleave", () => {
            iconTl.play("shrink");
        });
        learningCard.addEventListener("focus", () => {
            iconTl.tweenFromTo(0, "shrink");
        });
        learningCard.addEventListener("blur", () => {
            iconTl.play("shrink");
        });
    });
</script>
